name: Automation CI

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install Brew and Yarn
        run: |

          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          # Add Homebrew to PATH immediately
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          
          # Install yarn via brew
          brew install yarn

      - name: Install Node.js and Yarn
        run: |
          # Install Node.js 14.x (latest stable)
          curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Install yarn via apt (if not already done via brew)
          sudo apt-get install -y yarn

      - name: Clone the frontend repo
        run: |
          git clone https://x-access-token:${{ secrets.Thinkst_PAT }}@github.com/thinkst-nick/vue-realworld-example-app-mogale.git
          mv vue-realworld-example-app-mogale vue-realworld-example-app
          cd vue-realworld-example-app

      - name: Initial install to create lockfile
        run: yarn install --ignore-scripts

      - name: Run the server
        run: |
          cd vue-realworld-example-app
          yarn cache clean
          yarn install  --ignore-scripts
          yarn add sass
          yarn add cross-env --dev
          NODE_OPTIONS=--openssl-legacy-provider yarn serve &

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Install Google Chrome
        run: |
          chmod +x ./scripts/InstallChrome.sh
          ./scripts/InstallChrome.sh
          
      - name: Install Firefox and GeckoDriver
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=5
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "üîÑ Attempt $i to install Firefox and GeckoDriver..."
          
            {
              # Update package list and install Firefox
              sudo apt-get update &&
              sudo apt-get install -y firefox &&
          
              # Get latest GeckoDriver version
              GECKODRIVER_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep 'tag_name' | cut -d\" -f4) &&
          
              # Download and extract
              wget https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz &&
              tar -xvzf geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz &&
          
              chmod +x geckodriver &&
              sudo mv geckodriver /usr/local/bin/ &&
          
              echo "‚úÖ Installation succeeded!"
            } && break
          
            echo "‚ö†Ô∏è Attempt $i failed. Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
          done
          
          if [ "$i" -gt "$MAX_RETRIES" ]; then
            echo "‚ùå Installation failed after $MAX_RETRIES attempts."
            exit 1
          fi
      

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        continue-on-error: true
        run: |
          mkdir -p build/test-logs

          echo "üöÄ Running tests..."
          ./gradlew testAllBrowsers --info > build/test-logs/test.log 2>&1

      - name: Send Slack notification on test result
        if: always()
        run: |
          STATUS_FILE="${{ github.workspace }}/build/test-logs/test-status.txt"

          if [ -f "$STATUS_FILE" ]; then
            STATUS_CODE=$(cat "$STATUS_FILE")
          else
            STATUS_CODE=1  # Fail-safe fallback
          fi

          if [ "$STATUS_CODE" -eq 0 ]; then
            STATUS="‚úÖ *Tests passed! - "
          else
            STATUS="‚ùå *Tests failed!* Please check test results. - "
          fi

          RESULTS_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_MESSAGE="${STATUS}<${RESULTS_URL}|View Test Results on GitHub Actions>"

          echo "Sending Slack message: $SLACK_MESSAGE"

          PAYLOAD=$(jq -n --arg text "$SLACK_MESSAGE" '{text: $text}')

          curl -X POST -H 'Content-type: application/json' \
               --data "$PAYLOAD" \
               ${{ secrets.SLACK_WEBHOOK }}
      

      - name: Generate Allure report
        run: ./gradlew allureReport
        if: always()

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: build/reports/allure-report/allureReport
          overwrite: true
        if: always()

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            build/test-results/testChrome/*.xml